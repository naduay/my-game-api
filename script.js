const emojiSets = [
    ['üçé', 'üçâ', 'üçá', 'üçí', 'ü•≠', 'üçç'],
    ['üê∂', 'üê±', 'üêπ', 'ü¶ä', 'üêª', 'üêº'],
    ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèâ'],
    ['üåª', 'üåº', 'üåπ', 'üå∫', 'üåµ', 'üçÄ']
];

document.addEventListener("DOMContentLoaded", async function () {
    const gameContainer = document.querySelector('.game-container');
    const wrongAttemptsDisplay = document.getElementById('wrong-attempts');
    const newGameButton = document.getElementById('new-game');

    let currentEmojiSet = 0;
    let shuffledEmojis = [];
    let firstCard = null;
    let secondCard = null;
    let matchedPairs = 0;
    let wrongAttempts = 0;
    let exitCount = 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å API ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô

    const API_BASE_URL = "http://localhost:3000"; 
    const DATASET_API_URL = `${API_BASE_URL}/playerDataset`;
    const FRIEND_API_URL =  'http://asiakrub.pythonanywhere.com/weekly_exit_count';;
    const SEND_TO_FRIEND_API = 'http://asiakrub.pythonanywhere.com/update_severity';;

    const USER_ID = localStorage.getItem("user_id") || prompt("‡∏Å‡∏£‡∏≠‡∏Å User ID:", "test_user_12345");
    if (!USER_ID) {
        alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà User ID ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°");
        throw new Error("User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡πâ‡∏≠‡∏ô");
    }
    localStorage.setItem("user_id", USER_ID);
    console.log(`üë§ User ID: ${USER_ID}`);

    await fetchAndAnalyzeExitData(USER_ID);
    startGame();

    function startGame() {
        firstCard = null;
        secondCard = null;
        matchedPairs = 0;
        wrongAttempts = 0;
        wrongAttemptsDisplay.textContent = wrongAttempts;

        shuffledEmojis = [...emojiSets[currentEmojiSet], ...emojiSets[currentEmojiSet]].sort(() => Math.random() - 0.5);
        gameContainer.innerHTML = '';

        shuffledEmojis.forEach((emoji) => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.dataset.emoji = emoji;
            card.innerHTML = emoji; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
            gameContainer.appendChild(card);
        });

        setTimeout(() => {
            document.querySelectorAll('.card').forEach((card) => {
                card.textContent = "‚ùì";
                card.addEventListener('click', () => handleCardClick(card));
            });
        }, 2000); // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }

    function handleCardClick(card) {
        if (card.classList.contains('flipped') || card.classList.contains('matched') || (firstCard && secondCard)) return;

        card.classList.add('flipped');
        card.textContent = card.dataset.emoji;
        card.style.transform = "scale(1.1)";

        if (!firstCard) {
            firstCard = card;
        } else {
            secondCard = card;
            setTimeout(checkMatch, 500);
        }
    }

    function checkMatch() {
        if (firstCard.dataset.emoji === secondCard.dataset.emoji) {
            firstCard.classList.add('matched');
            secondCard.classList.add('matched');
            matchedPairs++;
            resetCards(true);

            if (matchedPairs === emojiSets[currentEmojiSet].length) {
                setTimeout(() => {
                    alert('üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
                    endGame();
                    nextGame();
                }, 500);
            }
        } else {
            wrongAttempts++;
            wrongAttemptsDisplay.textContent = wrongAttempts;

            setTimeout(() => {
                firstCard.classList.remove('flipped');
                secondCard.classList.remove('flipped');
                firstCard.innerHTML = "‚ùì";
                secondCard.innerHTML = "‚ùì";
                firstCard.style.transform = "scale(1)";
                secondCard.style.transform = "scale(1)";
                resetCards();
            }, 600);
        }
    }

    function resetCards(matched = false) {
        if (!matched) {
            firstCard.innerHTML = "‚ùì";
            secondCard.innerHTML = "‚ùì";
        }
        firstCard = null;
        secondCard = null;
    }

    function nextGame() {
        matchedPairs = 0;
        wrongAttempts = 0;
        currentEmojiSet = (currentEmojiSet + 1) % emojiSets.length;
        setTimeout(startGame, 1000);
    }

    async function fetchAndAnalyzeExitData(userId) {
        try {
            const response = await fetch(`${FRIEND_API_URL}?user_id=${userId}`);
            if (!response.ok) throw new Error(`‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (${response.status})`);
    
            const friendData = await response.json();
            console.log("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:", friendData);
    
            exitCount = friendData.count ? friendData.count : 0; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 0
        } catch (error) {
            console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
            exitCount = 0;
        }
    }

    async function analyzeUserData(userId, wrongAttempts, count) {
        console.log("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å analyzeUserData()", { userId, wrongAttempts, count }); // ‚úÖ Debugging
    
        let severity = determineAlzheimersStage(wrongAttempts, count);
        console.log(`üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: WrongAttempts = ${wrongAttempts}, Count = ${count}, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ = ${severity}`);
    
        await saveAnalysisToDB({
            user_id: userId,
            wrongAttempts,
            count,
            severity
        });
    }

    function determineAlzheimersStage(wrongAttempts, count) {
        let score = (wrongAttempts * 0.7) + (count / 10);  // ‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á count
        
        console.log(`üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:`);
        console.log(`üîπ Wrong Attempts: ${wrongAttempts}`);
        console.log(`üîπ Count (Exit Data): ${count}`);
        console.log(`üîπ Score: ${score}`);
    
        if (score < 1.5) return "None";
        if (score < 3) return "Moderate";
        return "Severe";
    }
    async function saveAnalysisToDB(analysisData) {
        console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á dataset ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô:", analysisData);
    
        try {
            const response = await fetch(DATASET_API_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(analysisData)
            });
    
            const data = await response.json();
            console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô dataset ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
    
            console.log("üì° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `sendAnalysisToFriend()` ..."); // ‚úÖ Debugging
            await sendAnalysisToFriend(analysisData);
        } catch (error) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á dataset ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô:", error);
        }
    }

    async function sendAnalysisToFriend(analysisData) {
        console.log("üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å sendAnalysisToFriend()...", analysisData); // ‚úÖ Debugging
        try {
            const response = await fetch(SEND_TO_FRIEND_API, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(analysisData)
            });
    
            const data = await response.json();
            console.log("‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
        } catch (error) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ:", error);
        }
    }

    async function endGame() {
        console.log("üî¥ ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
        await analyzeUserData(USER_ID, wrongAttempts, exitCount);
    }

    newGameButton.addEventListener('click', startGame);
});